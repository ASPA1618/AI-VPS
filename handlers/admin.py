import json
from aiogram import types, Router
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# 1. –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
MAIN_BOT_ID = 7717263680  # user_id –±–æ—Ç–∞ (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ)

# 2. –ì—Ä—É–ø–ø–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤/–∞–¥–º–∏–Ω–æ–≤
ADMINS_GROUP_ID = -1002804535488  # –¥–ª—è –∑–∞—è–≤–æ–∫ –∏ —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏

# 3. –õ–æ–≥-–≥—Ä—É–ø–ø–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
LOG_CHAT_ID = -1002528385675      # —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤

# Telegram ID –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤, –∫—Ç–æ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É
ADMIN_IDS = [8102776356, 7717263680]  # –¥–æ–±–∞–≤—å —Å–≤–æ–∏

CONFIG_PATH = "handlers/config.json"

def load_config():
    with open(CONFIG_PATH, "r", encoding="utf-8") as f:
        return json.load(f)

def save_config(config):
    with open(CONFIG_PATH, "w", encoding="utf-8") as f:
        json.dump(config, f, ensure_ascii=False, indent=4)

SOURCE_LABELS = {
    "gai": "–ë–∞–∑–∞ –î–ê–Ü",
    "omega": "Omega API",
    "ae": "AE Market"
}

router = Router()

def build_admin_keyboard(active_sources):
    kb = InlineKeyboardMarkup(row_width=1)
    for src, active in active_sources.items():
        label = SOURCE_LABELS.get(src, src.upper())
        status = "‚úÖ" if active else "‚ùå"
        kb.add(InlineKeyboardButton(
            text=f"{status} {label}",
            callback_data=f"toggle_{src}"
        ))
    return kb

from aiogram.filters import Command

@router.message(Command("admin"))

async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    config = load_config()
    kb = build_admin_keyboard(config['ACTIVE_SOURCES'])
    await message.answer("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–∂–µ—Ä–µ–ª–∞–º–∏:", reply_markup=kb)

@router.callback_query()
async def toggle_source(call: types.CallbackQuery):
    if call.from_user.id not in ADMIN_IDS:
        await call.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return
    src = call.data.replace("toggle_", "")
    config = load_config()
    if src not in config['ACTIVE_SOURCES']:
        await call.answer("‚õîÔ∏è –î–∂–µ—Ä–µ–ª–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    config['ACTIVE_SOURCES'][src] = not config['ACTIVE_SOURCES'][src]
    save_config(config)
    label = SOURCE_LABELS.get(src, src.upper())
    status_text = "–≤–∫–ª—é—á–µ–Ω–æ" if config['ACTIVE_SOURCES'][src] else "–≤—ñ–¥–∫–ª—é—á–µ–Ω–æ"
    await call.answer(f"{label} {status_text}")

    admin_name = call.from_user.full_name
    log_message = (
        f"üõ†Ô∏è *{admin_name}* ({call.from_user.id}) –∑–º—ñ–Ω–∏–≤ —Å—Ç–∞—Ç—É—Å –¥–∂–µ—Ä–µ–ª–∞ *{label}* –Ω–∞ *{status_text}*."
    )
    await call.bot.send_message(LOG_CHAT_ID, log_message, parse_mode="Markdown")

    kb = build_admin_keyboard(config['ACTIVE_SOURCES'])
    try:
        await call.message.edit_reply_markup(reply_markup=kb)
    except Exception:
        await call.message.answer("–ü–∞–Ω–µ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–∞.", reply_markup=kb)
