import os
import pytesseract
from PIL import Image
import re
from omega_api import vin_simple_search
from baza_gai_api import gai_vin_search
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv
from loguru import logger
from handlers.admin import router as admin_router
dp.include_router(admin_router)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ===
logger.add("bot.log", rotation="10 MB", compression="zip", enqueue=True)

load_dotenv()
TOKEN = os.getenv("BOT_TG_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

MAIN_BOT_ID = 7717263680  # user_id –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
ADMINS_GROUP_ID = -1002804535488  # ID –≥—Ä—É–ø–ø—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤/–∞–¥–º–∏–Ω–æ–≤
LOG_CHAT_ID = -1002528385675      # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ª–æ–≥–æ–≤

LANGUAGES = {
    "uk": "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "en": "üá¨üáß English"
}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram
async def log_to_tg(bot, message):
    try:
        await bot.send_message(LOG_CHAT_ID, message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –≤ Telegram: {e}")

# --- –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ VIN –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Tesseract
def extract_vin_from_image(photo_path):
    try:
        text = pytesseract.image_to_string(Image.open(photo_path))
        match = re.search(r'\b[A-HJ-NPR-Z0-9]{17}\b', text)
        logger.info(f"OCR text: {text}")
        if match:
            vin = match.group(0)
            logger.info(f"VIN —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {vin}")
            return vin
        logger.warning("VIN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.")
    except Exception as e:
        logger.error(f"OCR error: {e}")
    return None

@dp.message(CommandStart())
async def start(message: types.Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text=LANGUAGES['uk'])
    kb.button(text=LANGUAGES['ru'])
    kb.button(text=LANGUAGES['en'])
    kb.adjust(3)
    await message.answer(
        "–í—ñ—Ç–∞—î–º–æ! –ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à VIN-–∫–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –∞–±–æ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ (—á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É üìé).\n\n–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )
    logger.info(f"User {message.from_user.id} started bot.")
    await log_to_tg(bot, f"üü¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —Å—Ç–∞—Ä—Ç—É–≤–∞–≤ –±–æ—Ç–∞.")

@dp.message(F.text.in_([LANGUAGES['uk'], LANGUAGES['ru'], LANGUAGES['en']]))
async def choose_lang(message: types.Message):
    lang = [k for k, v in LANGUAGES.items() if v == message.text][0]
    await message.answer(f"–û–±—Ä–∞–Ω–∞ –º–æ–≤–∞: {LANGUAGES[lang]}. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ...")
    logger.info(f"User {message.from_user.id} chose language: {lang}")

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = file.file_path
    local_path = f"vin_{message.from_user.id}.jpg"
    await bot.download_file(file_path, local_path)
    logger.info(f"–§–æ—Ç–æ –æ—Ç {message.from_user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {local_path}")
    await log_to_tg(bot, f"üì∑ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ.")

    vin_code = extract_vin_from_image(local_path)
    if vin_code:
        await message.answer(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ VIN: {vin_code}\n–ü—Ä–æ–±–∏–≤–∞—î–º–æ —É –±–∞–∑–∞—Ö...")
        logger.info(f"VIN –∏–∑ —Ñ–æ—Ç–æ: {vin_code}")
        await process_vin(message, vin_code)
    else:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ VIN-–∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–º.")
        await bot.send_photo(
            ADMINS_GROUP_ID,
            photo=photo.file_id,
            caption=f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å VIN —Å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username or '-'} | ID: {message.from_user.id}"
        )
        await log_to_tg(bot, f"‚ùó –§–æ—Ç–æ –±–µ–∑ VIN –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")

@dp.message()
async def handle_user_message(message: types.Message):
    text = message.text.strip() if message.text else ""
    is_vin = len(text) == 17 and all(c.isalnum() for c in text)

    if is_vin:
        logger.info(f"VIN –≤—ñ–¥ —Ç–µ–∫—Å—Ç—É {text} –≤—ñ–¥ {message.from_user.id}")
        await process_vin(message, text)
    else:
        # –≠—Ç–æ –Ω–µ VIN ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤!
        await message.answer("–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ. –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")

        user_info = (
            f"üîî *–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*\n"
            f"üë§ @{message.from_user.username or '-'} | ID: {message.from_user.id}\n"
            f"–¢–µ–∫—Å—Ç:\n{text}\n"
        )
        await message.bot.send_message(ADMINS_GROUP_ID, user_info, parse_mode="Markdown")
        logger.info(f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ {message.from_user.id}: {text}")
        await log_to_tg(bot, f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ {message.from_user.id} (—Ç–µ–∫—Å—Ç)")

# --- –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ VIN (–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∏ –¥–ª—è —Ñ–æ—Ç–æ)
async def process_vin(message, vin_code):
    responses = []

    gai_info = gai_vin_search(vin_code)
    if gai_info and gai_info.get('result'):
        car = gai_info['result']
        responses.append(
            f"–ë–∞–∑–∞ –î–ê–Ü:\n"
            f"–ú–∞—Ä–∫–∞: {car.get('marka', '‚Äî')}\n"
            f"–ú–æ–¥–µ–ª—å: {car.get('model', '‚Äî')}\n"
            f"–†—ñ–∫: {car.get('year', '‚Äî')}\n"
            f"–î–≤–∏–≥—É–Ω: {car.get('engine', '‚Äî')}"
        )
    else:
        responses.append("–ë–∞–∑–∞ –î–ê–Ü: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∞–±–æ –ª—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ.")

    omega_info = vin_simple_search(vin_code)
    if omega_info:
        brand = omega_info.get("brand") or omega_info.get("mark") or ""
        model = omega_info.get("model", "")
        if brand or model:
            responses.append(f"Omega:\n–ú–∞—Ä–∫–∞: {brand}\n–ú–æ–¥–µ–ª—å: {model}")
        else:
            responses.append("Omega: –î–∞–Ω–∏—Ö –º–∞–ª–æ.")
    else:
        responses.append("Omega: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.")

    await message.answer('\n\n'.join(responses))
    logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id} –ø–æ VIN {vin_code}: {responses}")
    await log_to_tg(bot, f"üîç –ü—Ä–æ–±–∏–≤ –ø–æ VIN {vin_code} –¥–ª—è {message.from_user.id}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
