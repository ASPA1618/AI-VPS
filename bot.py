import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv
from loguru import logger

from handlers.admin import router as admin_router
from ocr_utils import extract_vin_from_image
from voice_to_text import recognize_speech
from welcome import make_welcome_text, get_profile_fields
from car_card import create_car_card
from product_menu import get_base_products
from omega_api import vin_simple_search
from baza_gai_api import gai_vin_search
from nova_poshta_api import get_warehouses, get_cities

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_lang = {}
user_name = {}

load_dotenv()
TOKEN = os.getenv("BOT_TG_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

dp.include_router(admin_router)

MAIN_BOT_ID = 7717263680
ADMINS_GROUP_ID = -1002804535488
LOG_CHAT_ID = -1002528385675
ADMIN_IDS = [8102776356]

logger.add("bot.log", rotation="10 MB", compression="zip", enqueue=True)

async def log_to_tg(bot, message):
    try:
        await bot.send_message(LOG_CHAT_ID, message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –≤ Telegram: {e}")

@dp.message(CommandStart())
async def start(message: types.Message):
    kb = ReplyKeyboardBuilder()
    for k, (title, code) in {
        "uk": ("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "uk"),
        "ru": ("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "ru"),
        "en": ("üá¨üáß English", "en")
    }.items():
        kb.button(text=title)
    kb.adjust(3)
    await message.answer(
        make_welcome_text(),
        reply_markup=kb.as_markup(resize_keyboard=True)
    )
    logger.info(f"User {message.from_user.id} started bot.")
    await log_to_tg(bot, f"üü¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —Å—Ç–∞—Ä—Ç—É–≤–∞–≤ –±–æ—Ç–∞.")

@dp.message(F.text.in_([v[0] for v in {
    "uk": ("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "uk"),
    "ru": ("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "ru"),
    "en": ("üá¨üáß English", "en")
}.values()]))
async def choose_lang(message: types.Message):
    lang_code = [k for k, v in {
        "uk": ("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "uk"),
        "ru": ("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "ru"),
        "en": ("üá¨üáß English", "en")
    }.items() if v[0] == message.text][0]
    user_lang[message.from_user.id] = lang_code
    suggest_name = (
        f"–Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, {message.from_user.username or message.from_user.id})"
    )
    await message.answer(suggest_name)
    logger.info(f"User {message.from_user.id} chose language: {lang_code}")

@dp.message(lambda message: message.from_user.id not in user_name and not message.text.startswith('/'))
async def set_name(message: types.Message):
    name = message.text.strip()
    user_name[message.from_user.id] = name
    await message.answer(f"–î—è–∫—É—î–º–æ, {name}! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å VIN-–∫–æ–¥ –∞–±–æ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞.")
    logger.info(f"User {message.from_user.id} set name: {name}")

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    if message.from_user.id not in user_name:
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–∫–∞–∂—ñ—Ç—å, —è–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å (–≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è).")
        return
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = file.file_path
    local_path = f"vin_{message.from_user.id}.jpg"
    await bot.download_file(file_path, local_path)
    logger.info(f"–§–æ—Ç–æ –æ—Ç {message.from_user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {local_path}")
    await log_to_tg(bot, f"üì∑ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ.")

    vin_code = extract_vin_from_image(local_path)
    if vin_code:
        await message.answer(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ VIN: {vin_code}\n–ü—Ä–æ–±–∏–≤–∞—î–º–æ —É –±–∞–∑–∞—Ö...")
        await process_vin(message, vin_code)
    else:
        await message.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ VIN-–∫–æ–¥. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–º.")
        await bot.send_photo(
            ADMINS_GROUP_ID,
            photo=photo.file_id,
            caption=f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å VIN –∑ —Ñ–æ—Ç–æ @{message.from_user.username or '-'} | ID: {message.from_user.id}"
        )
        await log_to_tg(bot, f"‚ùó –§–æ—Ç–æ –±–µ–∑ VIN –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")

@dp.message()
async def handle_user_message(message: types.Message):
    if message.text and message.text.startswith('/'):
        return
    if message.from_user.id not in user_name:
        await message.answer("–í–∫–∞–∂—ñ—Ç—å, —è–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å (–≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è).")
        return
    text = message.text.strip() if message.text else ""
    is_vin = len(text) == 17 and all(c.isalnum() for c in text)

    if is_vin:
        await process_vin(message, text)
    else:
        answer = "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ. –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
        await message.answer(answer)
        user_info = (
            f"üîî *–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ {user_name[message.from_user.id]}:*\n"
            f"üë§ @{message.from_user.username or '-'} | ID: {message.from_user.id}\n"
            f"–¢–µ–∫—Å—Ç:\n{text}\n"
        )
        await message.bot.send_message(ADMINS_GROUP_ID, user_info, parse_mode="Markdown")
        logger.info(f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ {message.from_user.id}: {text}")
        await log_to_tg(bot, f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ {message.from_user.id} (—Ç–µ–∫—Å—Ç)")

async def process_vin(message, vin_code):
    responses = []
    gai_info = gai_vin_search(vin_code)
    if gai_info and gai_info.get('result'):
        car = gai_info['result']
        responses.append(
            f"–ë–∞–∑–∞ –î–ê–Ü:\n"
            f"–ú–∞—Ä–∫–∞: {car.get('marka', '‚Äî')}\n"
            f"–ú–æ–¥–µ–ª—å: {car.get('model', '‚Äî')}\n"
            f"–†—ñ–∫: {car.get('year', '‚Äî')}\n"
            f"–î–≤–∏–≥—É–Ω: {car.get('engine', '‚Äî')}"
        )
    else:
        responses.append("–ë–∞–∑–∞ –î–ê–Ü: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∞–±–æ –ª—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ.")

    omega_info = vin_simple_search(vin_code)
    if omega_info:
        brand = omega_info.get("brand") or omega_info.get("mark") or ""
        model = omega_info.get("model", "")
        if brand or model:
            responses.append(f"Omega:\n–ú–∞—Ä–∫–∞: {brand}\n–ú–æ–¥–µ–ª—å: {model}")
        else:
            responses.append("Omega: –î–∞–Ω–∏—Ö –º–∞–ª–æ.")
    else:
        responses.append("Omega: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.")

    answer = '\n\n'.join(responses)
    await message.answer(answer)
    logger.info(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {message.from_user.id} –ø–æ VIN {vin_code}: {responses}")
    await log_to_tg(bot, f"üîç –ü—Ä–æ–±–∏–≤ –ø–æ VIN {vin_code} –¥–ª—è {message.from_user.id}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
