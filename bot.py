import os
from omega_api import vin_simple_search
from baza_gai_api import gai_vin_search
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("BOT_TG_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

MAIN_BOT_ID = 7717263680  # user_id –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
ADMINS_GROUP_ID = -1002804535488  # ID –≥—Ä—É–ø–ø—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤/–∞–¥–º–∏–Ω–æ–≤
LOG_CHAT_ID = -1002528385675      # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ª–æ–≥–æ–≤

LANGUAGES = {
    "uk": "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
    "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π",
    "en": "üá¨üáß English"
}

@dp.message(CommandStart())
async def start(message: types.Message):
    kb = ReplyKeyboardBuilder()
    kb.button(text=LANGUAGES['uk'])
    kb.button(text=LANGUAGES['ru'])
    kb.button(text=LANGUAGES['en'])
    kb.adjust(3)
    await message.answer(
        "–í—ñ—Ç–∞—î–º–æ! –ù–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à VIN-–∫–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –∞–±–æ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ (—á–µ—Ä–µ–∑ —Å–∫—Ä–µ–ø–∫—É üìé).\n\n–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:",
        reply_markup=kb.as_markup(resize_keyboard=True)
    )

@dp.message(F.text.in_([LANGUAGES['uk'], LANGUAGES['ru'], LANGUAGES['en']]))
async def choose_lang(message: types.Message):
    lang = [k for k, v in LANGUAGES.items() if v == message.text][0]
    await message.answer(f"–û–±—Ä–∞–Ω–∞ –º–æ–≤–∞: {LANGUAGES[lang]}. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ...")

@dp.message()
async def handle_user_message(message: types.Message):
    text = message.text.strip() if message.text else ""
    is_vin = len(text) == 17 and all(c.isalnum() for c in text)

    if is_vin:
        responses = []

        gai_info = gai_vin_search(text)
        if gai_info and gai_info.get('result'):
            car = gai_info['result']
            responses.append(
                f"–ë–∞–∑–∞ –î–ê–Ü:\n"
                f"–ú–∞—Ä–∫–∞: {car.get('marka', '‚Äî')}\n"
                f"–ú–æ–¥–µ–ª—å: {car.get('model', '‚Äî')}\n"
                f"–†—ñ–∫: {car.get('year', '‚Äî')}\n"
                f"–î–≤–∏–≥—É–Ω: {car.get('engine', '‚Äî')}"
            )
        else:
            responses.append("–ë–∞–∑–∞ –î–ê–Ü: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∞–±–æ –ª—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ.")

        omega_info = vin_simple_search(text)
        if omega_info:
            brand = omega_info.get("brand") or omega_info.get("mark") or ""
            model = omega_info.get("model", "")
            if brand or model:
                responses.append(f"Omega:\n–ú–∞—Ä–∫–∞: {brand}\n–ú–æ–¥–µ–ª—å: {model}")
            else:
                responses.append("Omega: –î–∞–Ω–∏—Ö –º–∞–ª–æ.")
        else:
            responses.append("Omega: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö.")

        await message.answer('\n\n'.join(responses))
    else:
        # –≠—Ç–æ –Ω–µ VIN ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –≥—Ä—É–ø–ø—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤!
        await message.answer("–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ. –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.")

        user_info = (
            f"üîî *–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:*\n"
            f"üë§ @{message.from_user.username or '-'} | ID: {message.from_user.id}\n"
            f"–¢–µ–∫—Å—Ç:\n{text}\n"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º–µ–Ω–Ω–æ –≤ –≥—Ä—É–ø–ø—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (ADMINS_GROUP_ID)
        await message.bot.send_message(ADMINS_GROUP_ID, user_info, parse_mode="Markdown")

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
