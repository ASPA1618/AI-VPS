import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from dotenv import load_dotenv
from loguru import logger

from handlers.admin import router as admin_router
from ocr_utils import extract_vin_from_image
from carquery_api import get_brands, get_models, get_years, get_engines

from users_storage import load_users, set_user_field, get_user_field

users = load_users()  # {telegram_id: {"lang": ..., "name": ..., ...}}

MAIN_BOT_ID = 7717263680
ADMINS_GROUP_ID = -1002804535488
LOG_CHAT_ID = -1002528385675
ADMIN_IDS = [8102776356]

load_dotenv()
TOKEN = os.getenv("BOT_TG_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()
dp.include_router(admin_router)
logger.add("bot.log", rotation="10 MB", compression="zip", enqueue=True)

async def log_to_tg(bot, message):
    try:
        await bot.send_message(LOG_CHAT_ID, message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞ –≤ Telegram: {e}")

LANGUAGES = {
    "uk": ("üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "uk"),
    "ru": ("üá∑üá∫ –†—É—Å—Å–∫–∏–π", "ru"),
    "en": ("üá¨üáß English", "en")
}

# --- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö
WELCOME_MSG = {
    "uk": "üëã –í—ñ—Ç–∞—î–º–æ –≤ *ASPA-–±–æ—Ç—ñ*!\n\nüöó –¢—É—Ç –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏–Ω–∏ –∑–∞ VIN-–∫–æ–¥–æ–º, —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ –∞–±–æ –≤—Ä—É—á–Ω—É –ø–æ –º–∞—Ä—Ü—ñ —Ç–∞ –º–æ–¥–µ–ª—ñ –∞–≤—Ç–æ.\n‚ö° –ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –º–æ–≤—É –Ω–∏–∂—á–µ üëá",
    "ru": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *ASPA-–±–æ—Ç*!\n\nüöó –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –ø–æ VIN-–∫–æ–¥—É, —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞ –∏–ª–∏ –≤—Ä—É—á–Ω—É—é –ø–æ –º–∞—Ä–∫–µ –∏ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ.\n‚ö° –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫ –Ω–∏–∂–µ üëá",
    "en": "üëã Welcome to *ASPA-bot*!\n\nüöó Here you can select auto parts by VIN code, registration certificate photo, or manually by brand and model.\n‚ö° Just choose your language below üëá"
}

def get_welcome_text(lang):
    return WELCOME_MSG.get(lang, WELCOME_MSG["uk"])

def get_choose_name(username, user_id, lang):
    if lang == "ru":
        return f"üìù –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?\n(–Ω–∞–ø—Ä–∏–º–µ—Ä, @{username} –∏–ª–∏ {user_id})"
    if lang == "en":
        return f"üìù How should we address you?\n(e.g., @{username} or {user_id})"
    return f"üìù –Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?\n(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @{username} –∞–±–æ {user_id})"

@dp.message(CommandStart())
async def start(message: types.Message):
    lang = get_user_field(users, message.from_user.id, "lang")
    if lang:
        name = get_user_field(users, message.from_user.id, "name") or message.from_user.id
        await message.answer(
            f"üëã –ó–Ω–æ–≤—É –≤—ñ—Ç–∞—î–º–æ, {name}!\n–û–±—Ä–∞–Ω–∞ –º–æ–≤–∞: {LANGUAGES[lang][0]}\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å VIN –∞–±–æ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞."
        )
        await message.answer(
            "üîç –ê–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ—é —Ä—É—á–Ω–æ–≥–æ –ø—ñ–¥–±–æ—Ä—É –∞–≤—Ç–æ:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîç –í–∏–±—Ä–∞—Ç–∏ –∞–≤—Ç–æ –≤—Ä—É—á–Ω—É")]],
                resize_keyboard=True
            )
        )
    else:
        kb = ReplyKeyboardBuilder()
        for code, (title, _) in LANGUAGES.items():
            kb.button(text=title)
        kb.adjust(3)
        await message.answer(
            get_welcome_text("uk"),
            reply_markup=kb.as_markup(resize_keyboard=True)
        )
        logger.info(f"User {message.from_user.id} started bot.")
        await log_to_tg(bot, f"üü¢ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —Å—Ç–∞—Ä—Ç—É–≤–∞–≤ –±–æ—Ç–∞.")

@dp.message(F.text.in_([v[0] for v in LANGUAGES.values()]))
async def choose_lang(message: types.Message):
    lang_code = [k for k, v in LANGUAGES.items() if v[0] == message.text][0]
    set_user_field(users, message.from_user.id, "lang", lang_code)
    await message.answer(
        get_choose_name(message.from_user.username, message.from_user.id, lang_code)
    )
    logger.info(f"User {message.from_user.id} chose language: {lang_code}")

@dp.message(lambda message: not get_user_field(users, message.from_user.id, "name") and not message.text.startswith('/'))
async def set_name(message: types.Message):
    name = message.text.strip()
    set_user_field(users, message.from_user.id, "name", name)
    lang = get_user_field(users, message.from_user.id, "lang", "uk")
    await message.answer(
        {
            "uk": f"–î—è–∫—É—î–º–æ, {name}! –¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å VIN-–∫–æ–¥ –∞–±–æ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞.\n–Ø–∫—â–æ VIN-–∫–æ–¥ –Ω–µ–≤—ñ–¥–æ–º–∏–π ‚Äî –æ–±–µ—Ä—ñ—Ç—å —Ä—É—á–Ω–∏–π –ø—ñ–¥–±—ñ—Ä –∞–≤—Ç–æ –∫–Ω–æ–ø–∫–æ—é –Ω–∏–∂—á–µ.",
            "ru": f"–°–ø–∞—Å–∏–±–æ, {name}! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ VIN-–∫–æ–¥ –∏–ª–∏ —Ñ–æ—Ç–æ —Ç–µ—Ö–ø–∞—Å–ø–æ—Ä—Ç–∞.\n–ï—Å–ª–∏ VIN-–∫–æ–¥ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–π –ø–æ–¥–±–æ—Ä –∞–≤—Ç–æ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
            "en": f"Thank you, {name}! Now send the VIN or registration certificate photo.\nIf VIN is unknown ‚Äî use the manual selection button below."
        }[lang],
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üîç –í–∏–±—Ä–∞—Ç–∏ –∞–≤—Ç–æ –≤—Ä—É—á–Ω—É")]],
            resize_keyboard=True
        )
    )
    logger.info(f"User {message.from_user.id} set name: {name}")

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    if not get_user_field(users, message.from_user.id, "name"):
        await message.answer("–°–ø–æ—á–∞—Ç–∫—É –≤–∫–∞–∂—ñ—Ç—å, —è–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å (–≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è).")
        return
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    file_path = file.file_path
    local_path = f"vin_{message.from_user.id}.jpg"
    await bot.download_file(file_path, local_path)
    logger.info(f"–§–æ—Ç–æ –æ—Ç {message.from_user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {local_path}")
    await log_to_tg(bot, f"üì∑ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞–¥—ñ—Å–ª–∞–≤ —Ñ–æ—Ç–æ.")

    vin_code = extract_vin_from_image(local_path)
    lang = get_user_field(users, message.from_user.id, "lang", "uk")
    if vin_code:
        await message.answer(
            {
                "uk": f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ VIN: {vin_code}\n–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ –±–∞–∑–∞—Ö...",
                "ru": f"VIN —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {vin_code}\n–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –±–∞–∑–∞–º...",
                "en": f"VIN recognized: {vin_code}\nChecking databases..."
            }[lang]
        )
        await process_vin(message, vin_code)
    else:
        await message.answer(
            {
                "uk": "‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ VIN-–∫–æ–¥. –í–∏ –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑, –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ç–µ–∫—Å—Ç–æ–º, –∞–±–æ –≤–∏–±—Ä–∞—Ç–∏ –∞–≤—Ç–æ –≤—Ä—É—á–Ω—É.",
                "ru": "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å VIN-–∫–æ–¥. –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ –≤—Ä—É—á–Ω—É—é.",
                "en": "‚ùó Failed to recognize VIN. Try again, send as text, or select your car manually."
            }[lang],
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîç –í–∏–±—Ä–∞—Ç–∏ –∞–≤—Ç–æ –≤—Ä—É—á–Ω—É")]],
                resize_keyboard=True
            )
        )
        await bot.send_photo(
            ADMINS_GROUP_ID,
            photo=photo.file_id,
            caption=f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å VIN –∑ —Ñ–æ—Ç–æ @{message.from_user.username or '-'} | ID: {message.from_user.id}"
        )
        await log_to_tg(bot, f"‚ùó –§–æ—Ç–æ –±–µ–∑ VIN –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}")

@dp.message(lambda message: message.text == "üîç –í–∏–±—Ä–∞—Ç–∏ –∞–≤—Ç–æ –≤—Ä—É—á–Ω—É")
async def manual_car_select(message: types.Message):
    brands = get_brands()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for b in brands[:20]:
        kb.add(KeyboardButton(text=b))
    await message.answer("üöó –û–±–µ—Ä—ñ—Ç—å –º–∞—Ä–∫—É –∞–≤—Ç–æ:", reply_markup=kb)
    set_user_field(users, message.from_user.id, "car_selection", {})

@dp.message(lambda msg: get_user_field(users, msg.from_user.id, "car_selection", {}) != {} and not get_user_field(users, msg.from_user.id, "car_selection", {}).get("brand"))
async def manual_car_brand(message: types.Message):
    brand = message.text
    models = get_models(brand)
    car_sel = get_user_field(users, message.from_user.id, "car_selection", {})
    car_sel["brand"] = brand
    set_user_field(users, message.from_user.id, "car_selection", car_sel)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for m in models[:20]:
        kb.add(KeyboardButton(text=m))
    await message.answer(f"üöó –û–±—Ä–∞–Ω–∞ –º–∞—Ä–∫–∞: {brand}\n\n–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å:", reply_markup=kb)

@dp.message(lambda msg: get_user_field(users, msg.from_user.id, "car_selection", {}).get("brand") and not get_user_field(users, msg.from_user.id, "car_selection", {}).get("model"))
async def manual_car_model(message: types.Message):
    model = message.text
    car_sel = get_user_field(users, message.from_user.id, "car_selection", {})
    brand = car_sel["brand"]
    years = get_years(brand, model)
    car_sel["model"] = model
    set_user_field(users, message.from_user.id, "car_selection", car_sel)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for y in years:
        kb.add(KeyboardButton(text=str(y)))
    await message.answer(f"üöó –û–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model}\n\n–û–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É:", reply_markup=kb)

@dp.message(lambda msg: get_user_field(users, msg.from_user.id, "car_selection", {}).get("model") and not get_user_field(users, msg.from_user.id, "car_selection", {}).get("year"))
async def manual_car_year(message: types.Message):
    year = message.text
    car_sel = get_user_field(users, message.from_user.id, "car_selection", {})
    brand = car_sel["brand"]
    model = car_sel["model"]
    engines = get_engines(brand, model, year)
    car_sel["year"] = year
    set_user_field(users, message.from_user.id, "car_selection", car_sel)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for eng in engines:
        name = f"{eng['desc']} | {eng['engine_type']} {eng['engine_cc']}—Å–º¬≥ {eng['power_hp']}–∫.—Å."
        kb.add(KeyboardButton(text=name))
    await message.answer(
        f"üöó –û–±—Ä–∞–Ω–æ: {brand} {model} {year}\n\n–û–±–µ—Ä—ñ—Ç—å –¥–≤–∏–≥—É–Ω:", 
        reply_markup=kb
    )

@dp.message(lambda msg: get_user_field(users, msg.from_user.id, "car_selection", {}).get("year") and not get_user_field(users, msg.from_user.id, "car_selection", {}).get("engine"))
async def manual_car_engine(message: types.Message):
    engine = message.text
    car_sel = get_user_field(users, message.from_user.id, "car_selection", {})
    car_sel["engine"] = engine
    set_user_field(users, message.from_user.id, "car_selection", car_sel)
    await message.answer(
        f"‚úÖ –í–∞—à –∞–≤—Ç–æ: {car_sel['brand']} {car_sel['model']} {car_sel['year']}\n"
        f"–î–≤–∏–≥—É–Ω: {engine}\n\n–¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏ –∞–±–æ –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True)
    )

@dp.message()
async def handle_user_message(message: types.Message):
    if message.text and message.text.startswith('/'):
        return
    if not get_user_field(users, message.from_user.id, "name"):
        await message.answer("–í–∫–∞–∂—ñ—Ç—å, —è–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å (–≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è).")
        return
    text = message.text.strip() if message.text else ""
    is_vin = len(text) == 17 and all(c.isalnum() for c in text)
    lang = get_user_field(users, message.from_user.id, "lang", "uk")

    if is_vin:
        await process_vin(message, text)
    else:
        answer = {
            "uk": "–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ. –û–ø–µ—Ä–∞—Ç–æ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.\n–ê–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ—é —Ä—É—á–Ω–æ–≥–æ –ø—ñ–¥–±–æ—Ä—É –∞–≤—Ç–æ:",
            "ru": "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π —Ä—É—á–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –∞–≤—Ç–æ:",
            "en": "Your request has been received. The operator will contact you soon.\nOr use the manual car selection button:"
        }[lang]
        await message.answer(
            answer,
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîç –í–∏–±—Ä–∞—Ç–∏ –∞–≤—Ç–æ –≤—Ä—É—á–Ω—É")]],
                resize_keyboard=True
            )
        )
        name = get_user_field(users, message.from_user.id, "name", message.from_user.id)
        user_info = (
            f"üîî *–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ {name}:*\n"
            f"üë§ @{message.from_user.username or '-'} | ID: {message.from_user.id}\n"
            f"–¢–µ–∫—Å—Ç:\n{text}\n"
        )
        await message.bot.send_message(ADMINS_GROUP_ID, user_info, parse_mode="Markdown")
        logger.info(f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ {message.from_user.id}: {text}")
        await log_to_tg(bot, f"–ó–∞—è–≤–∫–∞ –≤—ñ–¥ {message.from_user.id} (—Ç–µ–∫—Å—Ç)")

async def process_vin(message, vin_code):
    # ... (–æ—Å—Ç–∞–≤—å —Å–≤–æ—é —Ç–µ–∫—É—â—É—é –ª–æ–≥–∏–∫—É, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å —Ä–∞–±–æ—Ç—É —Å lang –∫–∞–∫ –≤—ã—à–µ)
    pass  # –ù–µ —Å—Ç–∞–ª –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π lang –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö –≤—ã—à–µ

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
